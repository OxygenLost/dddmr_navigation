occupancy2ground:
  ros__parameters:
    map_dir: "/root/dddmr/src/dddmr_global_planner/data/warehouse.pgm"

p2p_move_base:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 10.0
    planner_patience: 10.0
    oscillation_distance: 5.0
    oscillation_angle: 1.0
    oscillation_patience: 15.0
    controller_patience: 10.0
    no_plan_retry_num: 10
    waiting_patience: 10.0
global_plan_manager:
  ros__parameters:
    use_sim_time: true
    global_planner_action_name: "get_plan"
    global_plan_query_frequency: -1.0


local_planner:
  ros__parameters:
    use_sim_time: true
    odom_topic: odom
    forward_prune: 3.0
    backward_prune: 1.0
    heading_tracking_distance: 0.5
    heading_align_angle: 6.28 #align heading to this value and then move. 6.28 means dont align heading before moving
    prune_plane_timeout: 3.0
    xy_goal_tolerance: 0.3
    yaw_goal_tolerance: 0.3
    controller_frequency: 10.0
    
    cuboid:
      flb: [0.42, 0.36, 0.0] #front left buttom
      frb: [0.42, -0.36, 0.0]
      flt: [0.42, 0.36, 0.6] #front left top
      frt: [0.42, -0.36, 0.6]
      blb: [-0.35, 0.36, 0.0] #back left buttom
      brb: [-0.35, -0.36, 0.0]
      blt: [-0.35, 0.36, 0.6]
      brt: [-0.35, -0.36, 0.6]

recovery_behaviors:
  ros__parameters:
    plugins: ["rotate_inplace"]
    rotate_inplace:
      plugin: "recovery_behaviors::RotateInPlaceBehavior"
      frequency: 10.0
      tolerance: 0.3
      trajectory_generator_name: "differential_drive_rotate_inplace"

trajectory_generators:
  ros__parameters:
    plugins: ["omni_drive_simple", "differential_drive_rotate_inplace", "differential_drive_rotate_shortest_angle"]
    differential_drive_rotate_shortest_angle:
      plugin: "trajectory_generators::DDRotateInplaceTheory"
      controller_frequency: 10.0
      rotation_speed: 0.5
      cuboid:
        flb: [0.42, 0.36, 0.0] #front left buttom
        frb: [0.42, -0.36, 0.0]
        flt: [0.42, 0.36, 0.6] #front left top
        frt: [0.42, -0.36, 0.6]
        blb: [-0.35, 0.36, 0.0] #back left buttom
        brb: [-0.35, -0.36, 0.0]
        blt: [-0.35, 0.36, 0.6]
        brt: [-0.35, -0.36, 0.6]

    differential_drive_rotate_inplace:
      plugin: "trajectory_generators::DDRotateInplaceTheory"
      controller_frequency: 10.0
      rotation_speed: 0.5
      cuboid:
        flb: [0.42, 0.36, 0.0] #front left buttom
        frb: [0.42, -0.36, 0.0]
        flt: [0.42, 0.36, 0.6] #front left top
        frt: [0.42, -0.36, 0.6]
        blb: [-0.35, 0.36, 0.0] #back left buttom
        brb: [-0.35, -0.36, 0.0]
        blt: [-0.35, 0.36, 0.6]
        brt: [-0.35, -0.36, 0.6]
    
    omni_drive_simple:
      plugin: "trajectory_generators::OmniSimpleTrajectoryGeneratorTheory"
      max_vel_x: 1.0
      min_vel_x: -1.0
      max_vel_y: 1.0
      min_vel_y: -1.0
      max_vel_theta: 0.6
      min_vel_theta: 0.15
      min_vel_trans: 0.1
      max_vel_trans: 1.0
      acc_lim_x: 2.0
      acc_lim_y: 2.0
      acc_lim_theta: 3.0
      deceleration_ratio: 2.0
      use_motor_constraint: False
      
      controller_frequency: 10.0
      sim_time: 2.0
      linear_x_sample: 5.0
      linear_y_sample: 5.0
      angular_z_sample: 10.0
      sim_granularity: 0.05
      angular_sim_granularity: 0.025

      cuboid:
        flb: [0.42, 0.36, 0.0] #front left buttom
        frb: [0.42, -0.36, 0.0]
        flt: [0.42, 0.36, 0.6] #front left top
        frt: [0.42, -0.36, 0.6]
        blb: [-0.35, 0.36, 0.0] #back left buttom
        brb: [-0.35, -0.36, 0.0]
        blt: [-0.35, 0.36, 0.6]
        brt: [-0.35, -0.36, 0.6]

mpc_critics:
  ros__parameters:
    plugins: ["collision", "stick_path", "pure_pursuit", "toward_global_plan", "collision_rotate", "collision_rotate_shortest", "prefer_rotate_shortest", "twirling"]
    collision:
      plugin: "mpc_critics::CollisionModel"
      trajectory_generator: omni_drive_simple
      weight: 1.0
    stick_path:
      plugin: "mpc_critics::StickPathModel"
      trajectory_generator: omni_drive_simple
      weight: 0.1
    pure_pursuit:
      plugin: "mpc_critics::PurePursuitModel"
      trajectory_generator: omni_drive_simple
      translation_weight: 1.0
      orientation_weight: 0.01
    toward_global_plan:
      plugin: "mpc_critics::TowardGlobalPlanModel"
      trajectory_generator: omni_drive_simple
      weight: 1.0
    twirling:
      plugin: "mpc_critics::TwirlingModel"
      trajectory_generator: omni_drive_simple
      weight: 1.0
    collision_rotate:
      plugin: "mpc_critics::CollisionModel"
      trajectory_generator: differential_drive_rotate_inplace
      weight: 1.0
    collision_rotate_shortest:
      plugin: "mpc_critics::CollisionModel"
      trajectory_generator: differential_drive_rotate_shortest_angle
      weight: 1.0    
    prefer_rotate_shortest:
      plugin: "mpc_critics::ShortestAngleModel"
      trajectory_generator: differential_drive_rotate_shortest_angle
      weight: 1.0

perception_3d_local:
  ros__parameters:
    use_sim_time: true
    global_frame: "map"
    robot_base_frame: "base_link"
    max_obstacle_distance: 9999.0
    inscribed_radius: 0.5
    inflation_descending_rate: 2.0
    inflation_radius: 1.5
    sensors_collected_frequency: 10.0
    plugins: ["map"]
    map:
      plugin: "perception_3d::StaticLayer"
      is_local_planner: true
      mapping_mode: false
      map_topic: "mapcloud"
      ground_topic: "mapground"
    path_blocked_strategy:
      plugin: "perception_3d::PathBlockedStrategy"
      check_radius: 0.3

perception_3d_global:
  ros__parameters:
    use_sim_time: true
    global_frame: "map"
    robot_base_frame: "base_link"
    max_obstacle_distance: 9999.0
    inscribed_radius: 0.5
    inflation_descending_rate: 2.0
    inflation_radius: 1.5
    sensors_collected_frequency: 10.0
    plugins: ["map"]
    dgraph_publish_frequency: 1.0
    map:
      plugin: "perception_3d::StaticLayer"
      is_local_planner: false
      use_adaptive_connection: false #If true: the neighbors of node is sparse, it will automatically increase search radius.
      adaptive_connection_number: 20
      radius_of_ground_connection: 1.5 #If use_adaptive_connection=false, the radius search of the node is applied.
      intensity_search_radius: 1.0 #this value is suggested to be 1.0 meters, because if it is too large, the narrow passage will be miscalculated
      intensity_search_punish_weight: 0.1 #the weight for a node. Set this value higher means we dont like path planning cross a orphan node.
      static_imposing_radius: 1.5 #use map to add weight on each ground node
      map_topic: "mapcloud"
      ground_topic: "mapground"
      support:
        mapping_mode: false
          #if mapping mode is true, edge detection is automatically disabled
        enable_edge_detection: true
        generate_static_graph: false
          #the connection radius will be used
          #enable this value when using super dense ground say ground voxel size<=10 cm

global_planner:
  ros__parameters:
    use_sim_time: true
    turning_weight: 0.1 #Punish the zig-zag path
    enable_detail_log: false
    a_star_expanding_radius: 0.5

#if we use get_dwa_plan in global_plan_manager, we setup parameters for dwa_global_planner
dynamic_window_aware_global_planner:
  ros__parameters:
    use_sim_time: true
    look_ahead_distance: 2.0
    recompute_frequency: 10.0
    