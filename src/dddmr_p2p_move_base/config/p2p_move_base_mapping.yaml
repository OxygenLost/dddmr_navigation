p2p_move_base:
  ros__parameters:
    controller_frequency: 10.0
    planner_patience: 10.0
    oscillation_distance: 5.0
    oscillation_angle: 1.0
    oscillation_patience: 15.0
    controller_patience: 10.0
    no_plan_retry_num: 10
    waiting_patience: 10.0
global_plan_manager:
  ros__parameters:
    global_planner_action_name: "get_plan"
    global_plan_query_frequency: -1.0

local_planner:
  ros__parameters:
    odom_topic: odom
    forward_prune: 3.0
    backward_prune: 1.0
    heading_tracking_distance: 0.5
    heading_align_angle: 0.5
    prune_plane_timeout: 3.0
    xy_goal_tolerance: 0.3
    yaw_goal_tolerance: 0.3
    controller_frequency: 10.0
    
    cuboid:
      flb: [0.42, 0.36, 0.0] #front left buttom
      frb: [0.42, -0.36, 0.0]
      flt: [0.42, 0.36, 0.6] #front left top
      frt: [0.42, -0.36, 0.6]
      blb: [-0.35, 0.36, 0.0] #back left buttom
      brb: [-0.35, -0.36, 0.0]
      blt: [-0.35, 0.36, 0.6]
      brt: [-0.35, -0.36, 0.6]

recovery_behaviors:
  ros__parameters:
    plugins: ["rotate_inplace"]
    rotate_inplace:
      plugin: "recovery_behaviors::RotateInPlaceBehavior"
      frequency: 10.0
      tolerance: 0.3
      trajectory_generator_name: "differential_drive_rotate_inplace"

trajectory_generators:
  ros__parameters:
    plugins: ["differential_drive_simple", "differential_drive_rotate_inplace", "differential_drive_rotate_shortest_angle"]
    differential_drive_rotate_shortest_angle:
      plugin: "trajectory_generators::DDRotateInplaceTheory"
      controller_frequency: 10.0
      rotation_speed: 0.5
      cuboid:
        flb: [0.42, 0.36, 0.0] #front left buttom
        frb: [0.42, -0.36, 0.0]
        flt: [0.42, 0.36, 0.6] #front left top
        frt: [0.42, -0.36, 0.6]
        blb: [-0.35, 0.36, 0.0] #back left buttom
        brb: [-0.35, -0.36, 0.0]
        blt: [-0.35, 0.36, 0.6]
        brt: [-0.35, -0.36, 0.6]

    differential_drive_rotate_inplace:
      plugin: "trajectory_generators::DDRotateInplaceTheory"
      controller_frequency: 10.0
      rotation_speed: 0.5
      cuboid:
        flb: [0.42, 0.36, 0.0] #front left buttom
        frb: [0.42, -0.36, 0.0]
        flt: [0.42, 0.36, 0.6] #front left top
        frt: [0.42, -0.36, 0.6]
        blb: [-0.35, 0.36, 0.0] #back left buttom
        brb: [-0.35, -0.36, 0.0]
        blt: [-0.35, 0.36, 0.6]
        brt: [-0.35, -0.36, 0.6]
    
    differential_drive_simple:
      plugin: "trajectory_generators::DDSimpleTrajectoryGeneratorTheory"
      max_vel_x: 1.0
      min_vel_x: 0.1 #0.1 This value should not be negative, because we want to customize backward behavior
      max_vel_theta: 0.6
      min_vel_theta: 0.15
      acc_lim_x: 1.0
      acc_lim_theta: 3.0
      deceleration_ratio: 2.0
      max_motor_shaft_rpm: 3000.0
      wheel_diameter: 0.16
      gear_ratio: 1.0
      robot_radius: 0.25
      
      controller_frequency: 10.0
      sim_time: 2.0
      linear_x_sample: 5.0
      angular_z_sample: 10.0
      sim_granularity: 0.05
      angular_sim_granularity: 0.025

      cuboid:
        flb: [0.42, 0.36, 0.0] #front left buttom
        frb: [0.42, -0.36, 0.0]
        flt: [0.42, 0.36, 0.6] #front left top
        frt: [0.42, -0.36, 0.6]
        blb: [-0.35, 0.36, 0.0] #back left buttom
        brb: [-0.35, -0.36, 0.0]
        blt: [-0.35, 0.36, 0.6]
        brt: [-0.35, -0.36, 0.6]

mpc_critics:
  ros__parameters:
    plugins: ["collision", "stick_path", "pure_pursuit", "toward_global_plan", "collision_rotate", "collision_rotate_shortest", "prefer_rotate_shortest"]
    collision:
      plugin: "mpc_critics::CollisionModel"
      trajectory_generator: differential_drive_simple
      weight: 1.0
    stick_path:
      plugin: "mpc_critics::StickPathModel"
      trajectory_generator: differential_drive_simple
      weight: 0.1
    pure_pursuit:
      plugin: "mpc_critics::PurePursuitModel"
      trajectory_generator: differential_drive_simple
      translation_weight: 1.0
      orientation_weight: 0.01
    toward_global_plan:
      plugin: "mpc_critics::TowardGlobalPlanModel"
      trajectory_generator: differential_drive_simple
      weight: 1.0
    collision_rotate:
      plugin: "mpc_critics::CollisionModel"
      trajectory_generator: differential_drive_rotate_inplace
      weight: 1.0
    collision_rotate_shortest:
      plugin: "mpc_critics::CollisionModel"
      trajectory_generator: differential_drive_rotate_shortest_angle
      weight: 1.0    
    prefer_rotate_shortest:
      plugin: "mpc_critics::ShortestAngleModel"
      trajectory_generator: differential_drive_rotate_shortest_angle
      weight: 1.0

perception_3d_local:
  ros__parameters:
    global_frame: "map"
    robot_base_frame: "base_link"
    max_obstacle_distance: 9999.0
    inscribed_radius: 0.5
    inflation_descending_rate: 2.0
    inflation_radius: 1.5
    sensors_collected_frequency: 10.0
    plugins: ["map", "path_blocked_strategy", "lidar"]
    map:
      plugin: "perception_3d::StaticLayer"
      is_local_planner: true
      mapping_mode: true
      map_topic: "lego_loam_map"
      ground_topic: "lego_loam_ground"
    path_blocked_strategy:
      plugin: "perception_3d::PathBlockedStrategy"
      check_radius: 0.3
    lidar:
      plugin: "perception_3d::MultiLayerSpinningLidar"
      is_local_planner: true
      topic: "segmented_cloud_pure"
      pub_gbl_marking_for_visualization: false
      vertical_FOV_top: 15.0
      vertical_FOV_bottom: -15.0
      scan_effective_positive_start: 30.0
      scan_effective_positive_end: 180.0
      scan_effective_negative_start: -30.0
      scan_effective_negative_end: -180.0
      resolution: 0.05
      height_resolution: 0.05
      marking_height: 2.0
      perception_window_size: 3.0 #the window for marking/clearing in meter, we dont casting to maximum range of the sensor even it is gbl map
      segmentation_ignore_ratio: 0.5 #f a segmentation match static pc with this ratio, we ignore it. ex: a wall
      expected_sensor_time: 0.2

perception_3d_global:
  ros__parameters:
    global_frame: "map"
    robot_base_frame: "base_link"
    max_obstacle_distance: 9999.0
    inscribed_radius: 0.5
    inflation_descending_rate: 2.0
    inflation_radius: 1.5
    sensors_collected_frequency: 10.0
    plugins: ["map", "lidar"]
    dgraph_publish_frequency: 1.0
    map:
      plugin: "perception_3d::StaticLayer"
      is_local_planner: false
      use_adaptive_connection: false #If true: the neighbors of node is sparse, it will automatically increase search radius.
      adaptive_connection_number: 20
      radius_of_ground_connection: 1.0 #If use_adaptive_connection=false, the radius search of the node is applied.
      hollow_hole_tolerance: 10 #If there are small holes in the ground, and you want to ignore them, increase this value 
      intensity_search_radius: 1.0 #this value is suggested to be 1.0 meters, because if it is too large, the narrow passage will be miscalculated
      intensity_search_punish_weight: 0.1 #the weight for a node. Set this value higher means we dont like path planning cross a orphan node.
      static_imposing_radius: 2.0 #use map to add weight on each ground node
      mapping_mode: true
      map_topic: "lego_loam_map"
      ground_topic: "lego_loam_ground"
    lidar:
      plugin: "perception_3d::MultiLayerSpinningLidar"
      is_local_planner: false
      topic: "segmented_cloud_pure"
      pub_gbl_marking_for_visualization: false #set to true to visualize marking, but update frequency will be compromised
      vertical_FOV_top: 15.0
      vertical_FOV_bottom: -15.0
      scan_effective_positive_start: 30.0
      scan_effective_positive_end: 180.0
      scan_effective_negative_start: -30.0
      scan_effective_negative_end: -180.0
      euclidean_cluster_extraction_tolerance: 0.1
      euclidean_cluster_extraction_min_cluster_size: 1
      xy_resolution: 0.05
      height_resolution: 0.05
      marking_height: 2.0
      perception_window_size: 5.0 #the window for marking/clearing in meter, we dont casting to maximum range of the sensor even it is gbl map
      segmentation_ignore_ratio: 1.1 #f a segmentation match static pc with this ratio, we ignore it. ex: a wall
      expected_sensor_time: 0.1

global_planner:
  ros__parameters:
    turning_weight: 0.1 #Punish the zig-zag path
